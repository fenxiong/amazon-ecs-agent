// Code generated by MockGen. DO NOT EDIT.
// Source: agent/nswrapper/ns.go

// Package mock_nswrapper is a generated GoMock package.
package mock_utils

import (
	ns "github.com/containernetworking/plugins/pkg/ns"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNS is a mock of NS interface.
type MockNS struct {
	ctrl     *gomock.Controller
	recorder *MockNSMockRecorder
}

// MockNSMockRecorder is the mock recorder for MockNS.
type MockNSMockRecorder struct {
	mock *MockNS
}

// NewMockNS creates a new mock instance.
func NewMockNS(ctrl *gomock.Controller) *MockNS {
	mock := &MockNS{ctrl: ctrl}
	mock.recorder = &MockNSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNS) EXPECT() *MockNSMockRecorder {
	return m.recorder
}

// GetNS mocks base method.
func (m *MockNS) GetNS(nspath string) (ns.NetNS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNS", nspath)
	ret0, _ := ret[0].(ns.NetNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNS indicates an expected call of GetNS.
func (mr *MockNSMockRecorder) GetNS(nspath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNS", reflect.TypeOf((*MockNS)(nil).GetNS), nspath)
}

// WithNetNSPath mocks base method.
func (m *MockNS) WithNetNSPath(nspath string, toRun func(ns.NetNS) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithNetNSPath", nspath, toRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithNetNSPath indicates an expected call of WithNetNSPath.
func (mr *MockNSMockRecorder) WithNetNSPath(nspath, toRun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNetNSPath", reflect.TypeOf((*MockNS)(nil).WithNetNSPath), nspath, toRun)
}
